{"chunk":0,"numChunks":1,"fileHash":"hWN3EXl4DcM4dHzcG/BTAX2mNowDc0XMkn554CrJgYY=","filePath":"backend/routes/login.js","content":"const express = require('express');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst User = require('../models/register'); // Ensure you have a User model defined\r\n\r\nconst loginRouter = express.Router();\r\n\r\nloginRouter.post('/login', async (req, res) => {\r\n  const userData = {\r\n    email: req.body.email,\r\n    password: req.body.password\r\n  };\r\n\r\n  if (!userData.email || !userData.password) {\r\n    return res.status(400).json({ error: 'Email and password are required' });\r\n  }\r\n\r\n  try {\r\n    // Find the user by email\r\n    const user = await User.findOne({ email: userData.email });\r\n    if (!user) {\r\n      return res.status(400).json({ error: 'Invalid email or password' });\r\n    }\r\n\r\n    // Compare the provided password with the stored hashed password\r\n    const isMatch = await bcrypt.compare(userData.password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ error: 'Invalid email or password' });\r\n    }\r\n\r\n    // Generate a JWT token\r\n    const token = jwt.sign({ userId: user._id }, 'your_jwt_secret', { expiresIn: '1h' });\r\n\r\n    // Respond with the token\r\n    res.json({ token });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\nmodule.exports = loginRouter;"}